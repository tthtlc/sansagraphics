import matplotlib.pyplot as plt

def draw_vectors(plt, start_point, vectors, fraction, cycles):
    points = [start_point]
    new_vectors = []

    current_point = start_point

    for cycle in range(cycles):
        for vector in vectors:
            next_point = (current_point[0] + vector[0], current_point[1] + vector[1])
            new_point = (vector[0] + fraction * prev_vector[0], vector[1] + fraction * prev_vector[1])
            print(new_point)
            points.append(next_point)
            new_vectors.append(new_point)
            current_point = next_point
        
        # Reduce the vectors by the fraction for the next cycle
        #vectors = [(v[0] * fraction, v[1] * fraction) for v in vectors]
        vectors = new_vectors
        new_vectors = []
        plot_lines(plt, points)

    return

def plot_lines(plt, points):
    x_coords, y_coords = zip(*points)
    plt.plot(x_coords, y_coords, marker='o')

# Initial conditions
start_point = (0, 0)
vectors = [(1, 0), (0, 1), (-1, 0), (0, -1)]
fraction = 0.90
cycles = 10  # Number of cycles to apply

# Apply the vectors and generate the path
plt.figure(figsize=(6, 6))
draw_vectors(plt, start_point, vectors, fraction, cycles)
plt.title('Path Generated by Successive Vector Application')
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.grid(True)
plt.show()


# Plot the resulting path

